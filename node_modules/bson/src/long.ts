import { BSONValue } from './bson_value';
import { BSONError } from './error';
import type { EJSONOptions } from './extended_json';
import type { Timestamp } from './timestamp';

interface LongWASMHelpers {
  /** Gets the high bits of the last operation performed */
  get_high(this: void): number;
  div_u(
    this: void,
    lowBits: number,
    highBits: number,
    lowBitsDivisor: number,
    highBitsDivisor: number
  ): number;
  div_s(
    this: void,
    lowBits: number,
    highBits: number,
    lowBitsDivisor: number,
    highBitsDivisor: number
  ): number;
  rem_u(
    this: void,
    lowBits: number,
    highBits: number,
    lowBitsDivisor: number,
    highBitsDivisor: number
  ): number;
  rem_s(
    this: void,
    lowBits: number,
    highBits: number,
    lowBitsDivisor: number,
    highBitsDivisor: number
  ): number;
  mul(
    this: void,
    lowBits: number,
    highBits: number,
    lowBitsMultiplier: number,
    highBitsMultiplier: number
  ): number;
}

/**
 * wasm optimizations, to do native i64 multiplication and divide
 */
let wasm: LongWASMHelpers | undefined = undefined;

/* We do not want to have to include DOM types just for this check */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
declare const WebAssembly: any;

try {
  wasm = new WebAssembly.Instance(
    new WebAssembly.Module(
      // prettier-ignore
      new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])
    ),
    {}
  ).exports as unknown as LongWASMHelpers;
} catch {
  // no wasm support
}

const TWO_PWR_16_DBL = 1 << 16;
const TWO_PWR_24_DBL = 1 << 24;
const TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;
const TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;
const TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;

/** A cache of the Long representations of small integer values. */
const INT_CACHE: { [key: number]: Long } = {};

/** A cache of the Long representations of small unsigned integer values. */
const UINT_CACHE: { [key: number]: Long } = {};

const MAX_INT64_STRING_LENGTH = 20;

const DECIMAL_REG_E